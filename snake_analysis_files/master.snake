
configfile: 'config.yml'

SAMPLE_MAPPING = config['sample_map']

INPUT_DIR = config['dirs']['input']
OUTPUT_DIR = config['dirs']['output']
#TMP_DIR = config['dirs']['temp']

PREDICTED_TRAIN_OUT = OUTPUT_DIR + "cv_train_summary/"
PREDICTED_TEST_OUT = OUTPUT_DIR + "cv_test_summary/"
####################################################################
def get_sample_names():
    output = [] 
    if output == []:
        if not 'SAMPLE_MAPPING' in globals():
            return ['NOMAPPINGFILE']
        try:
            open(SAMPLE_MAPPING, "r")
        except IOError:
            return ['NOMAPPINGFILE']
        sampleMap = dict()
        with open(SAMPLE_MAPPING, "r") as f:
            for line in f:
                if line.strip() != "":
                    lineSplit = line.strip().split()
                    sample = lineSplit[1]
                    if not (sample in output):
                        output.append(sample)
    return output

sample = get_sample_names()
###################################################################
localrules: all, calc_statistics, plot_statistics

rule all:
	input:
		expand(PREDICTED_TEST_OUT + '{sample}.stats_plot.png', sample=sample)
	output:
		OUTPUT_DIR + 'run_completed.txt'
	shell:
		'"run complete" > run_completed.txt'

rule train:
        input:
                PREDICTED_TRAIN_OUT + 'cv_summary.tsv'
        output:
                OUTPUT_DIR + "train_complete.txt"
        shell:
                '"complete" > train_complete.txt'

rule test:
        input:
                PREDICTED_TEST_OUT + 'cv_summary.tsv',
                PREDICTED_TEST_OUT + 'summary_statistics.tsv'
        output:
                OUTPUT_DIR + "test_complete.txt"
        shell:
                '"complete" > test_complete.txt'


rule calc_statistics:
        input:
                PREDICTED_TEST_OUT + '{sample}.cv_summary.tsv'
        output:
                PREDICTED_TEST_OUT + '{sample}.summary_statistics.tsv'
        shell:
                config['call']['statistics'] + ' {input}'

rule plot_statistics:
        input:
                PREDICTED_TEST_OUT + '{sample}.summary_statistics.tsv'
        output:
                PREDICTED_TEST_OUT + '{sample}.stats_plot.png'
        shell:
                config['call']['plot'] + ' {input}'

####################################################################

include: 'train.snake'

include: 'test.snake'

