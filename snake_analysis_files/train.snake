import os, glob, sys, datetime
from os import path

####################################################
#configfile: '../doc/config.yml'
include: 'misc_snake.py'
####################################################
SAMPLE_MAPPING = config['input_output']['sample_map']
sample_names = get_sample_names()
####################################################
INPUT_DIR = config['input_output']['input_dir']
OUTPUT_DIR = config['input_output']['output_dir']
TMP_DIR = config['input_output']['tmp_dir']
####################################################
k_fold_index = list(range(1, config['statistics']['cross_validation']['k_folds'] + 1))
print(k_fold_index)
#selected_tools = config['resources']['tools']
selected_tools = ['rf','svm','garnett']
####################################################
CV_FOLD_IN = INPUT_DIR
CV_FOLD_OUT = OUTPUT_DIR + "cv_k_index/" #add slashes to dir ends for consistency

MARKER_GENES_IN = INPUT_DIR
MARKER_GENES_OUT = OUTPUT_DIR + "marker_genes/"

RF_TRAIN_IN = INPUT_DIR
RF_TRAIN_OUT = OUTPUT_DIR + "rf/"

SVM_TRAIN_IN = INPUT_DIR
SVM_TRAIN_OUT = OUTPUT_DIR + "svm/"

GARNETT_TRAIN_IN = INPUT_DIR
GARNETT_TRAIN_OUT = OUTPUT_DIR + "garnett/"

PREDICTED_TRAIN_OUT = OUTPUT_DIR + "cv_train_summary/"

CV_SUMMARY_IN = OUTPUT_DIR + "cv_train_summary/"
CV_SUMMARY_OUT = OUTPUT_DIR + "cv_train_summary/"
########################################################
#k_index -> get k from config and then seq 1...k
# DON'T USE DYNAMIC
# global variable: e.g. tools = ['rf','svm','garnett']
# test w/ 2 k to start


localrules: all, cv_summary_train
rule all:
        input:
                #expand(INPUT_DIR + '{sample}.genes_cells_filtered.corrected.atypical_removed.RDS', sample = sample_names),
                expand(MARKER_GENES_OUT + '{sample}_markers.gmx', sample = sample_names), #see which inputs are necessary; maybe only keep all/cv_summary
                expand(PREDICTED_TRAIN_OUT + '{sample}.{method}.predicted_labels_index{k_index}.tsv', sample = sample_names, method = selected_tools, k_index = k_fold_index),
                expand(PREDICTED_TRAIN_OUT + '{sample}.{method}.predicted_labels_all.tsv', sample = sample_names, method = selected_tools),
                #expand(PREDICTED_TRAIN_OUT + '{sample}.rf.predicted_labels.tsv', sample = sample_names),
                #expand(PREDICTED_TRAIN_OUT + '{sample}.rf.predicted_labels_all.tsv', sample = sample_names),
                #expand(PREDICTED_TRAIN_OUT + '{sample}.garnett.predicted_labels.tsv', sample = sample_names),
                #expand(PREDICTED_TRAIN_OUT + '{sample}.garnett.predicted_labels_all.tsv', sample = sample_names),
                #expand(RF_TRAIN_OUT + '{sample}.model.RDS', sample = sample_names),
                #expand(SVM_TRAIN_OUT + '{sample}.model.RDS', sample = sample_names),
                #expand(GARNETT_TRAIN_OUT + '{sample}.model.RDS', sample = sample_names),
                expand(PREDICTED_TRAIN_OUT + '{sample}.cv_summary.tsv', sample = sample_names),
                expand(CV_FOLD_OUT + "{sample}.indexAll.RDS", sample = sample_names),
                expand(CV_FOLD_OUT + "{sample}.index{k_index}.RDS", sample = sample_names, k_index = k_fold_index),
                #expand(PREDICTED_TRAIN_OUT + '{sample}.cv_summary.lsfout.log', sample = sample_names),
                #expand(PREDICTED_TRAIN_OUT + '{sample}.cv_summary.lsferr.log', sample = sample_names)
        output:
                OUTPUT_DIR + "complete.txt"
        params:
                lsfoutfile = expand(OUTPUT_DIR + '{sample}.train_run.lsfout.log', sample = sample_names),
                lsferrfile = expand(OUTPUT_DIR + '{sample}.train_run.lsferr.log', sample = sample_names)
        shell:
                ' date > {output}'

rule cross_validation:
        input:
                sce_in = CV_FOLD_IN + "{sample}.genes_cells_filtered.corrected.atypical_removed.RDS" # use variables for single inputs for clarity/readability
        output:
                barcodes_out = CV_FOLD_OUT + '{sample}.index{k_index}.RDS', #note: barcode list
        params:
                lsfoutfile = CV_FOLD_OUT + '{sample}.cv.lsfout.log', #change all lsf/benchmark paths to incl. specific output dir
                lsferrfile = CV_FOLD_OUT + '{sample}.cv.lsferr.log',
                scratch = config['statistics']['cross_validation']['scratch'],
                mem = config['statistics']['cross_validation']['mem'],
                time = config['statistics']['cross_validation']['time'],
                params = config['statistics']['cross_validation']['params'],
                output_dir = CV_FOLD_OUT
        threads:
                config['statistics']['cross_validation']['threads']

        shell:
                config['statistics']['cross_validation']['call'] + ' --SCE {input.sce_in} --outputDirec {params.output_dir}'

rule find_markers:
        input:
               sce_in =  MARKER_GENES_IN + '{sample}.genes_cells_filtered.corrected.atypical_removed.RDS'
        output:
                gmx_out = MARKER_GENES_OUT + '{sample}_markers.gmx'
        params:
                lsfoutfile = MARKER_GENES_OUT + '{sample}.find_markers.lsfout.log',
                lsferrfile = MARKER_GENES_OUT + '{sample}.find_markers.lsferr.log',
                scratch = config['markers']['find_markers']['scratch'],
                mem = config['markers']['find_markers']['mem'],
                time = config['markers']['find_markers']['time'],
                params = config['markers']['find_markers']['params'],
                sample_name = '{sample}',
                output_dir = MARKER_GENES_OUT
        threads:
                config['markers']['find_markers']['threads']

        shell:
                config['markers']['find_markers']['call'] + ' --SCE {input.sce_in} --outputDirec {params.output_dir}  --sampleName {params.sample_name}' #might not respect wildcard - fix w/ params

rule convert_markers:
        input:
                gmx_in = MARKER_GENES_OUT + '{sample}_markers.gmx'
        output:
                tsv_out = MARKER_GENES_OUT + '{sample}_markers_garnett.tsv'
        params:
                lsfoutfile = MARKER_GENES_OUT + '{sample}.convert_markers.lsfout.log',
                lsferrfile = MARKER_GENES_OUT + '{sample}.convert_markers.lsferr.log',
                scratch = config['markers']['convert_markers']['scratch'],
                mem = config['markers']['convert_markers']['mem'],
                time = config['markers']['convert_markers']['time'],
                params = config['markers']['convert_markers']['params']
        threads:
                config['markers']['convert_markers']['threads']
        shell:
                config['markers']['convert_markers']['call'] + ' --gmx_file {input.gmx_in} --tsv_file {output.tsv_out}'

rule rf_train:
        input:
                sce_in =  RF_TRAIN_IN + '{sample}.genes_cells_filtered.corrected.atypical_removed.RDS',
                barcodes = CV_FOLD_OUT + '{sample}.index{k_index}.RDS'
        output:
                #model_dir = RF_TRAIN_OUT + '{sample}.model.RDS',
                pred_labels = PREDICTED_TRAIN_OUT + '{sample}.rf.predicted_labels_index{k_index}.tsv'
        params:
                lsfoutfile = RF_TRAIN_OUT + 'rf_train.lsfout.log',
                lsferrfile = RF_TRAIN_OUT + 'rf_train.lsferr.log',
                scratch = config['methods']['rf']['train']['scratch'],
                mem = config['methods']['rf']['train']['mem'],
                time = config['methods']['rf']['train']['time'],
                params = config['methods']['rf']['train']['params'],
                output_dir = RF_TRAIN_OUT,
                sample_name = "{sample}"
        threads:
                config['methods']['rf']['train']['threads']
        shell:
                config['methods']['rf']['train']['call'] + ' --SCE {input.sce_in} --CV_index {input.barcodes} --outputDirec {params.output_dir} --sampleName {params.sample_name}'

rule rf_train_all:
        input:
                sce_in = RF_TRAIN_IN + '{sample}.genes_cells_filtered.corrected.atypical_removed.RDS',
                barcodes = CV_FOLD_OUT + '{sample}.indexAll.RDS'
        output:
                #RF_TRAIN_OUT + '{sample}.model_all.RDS',
                pred_labels = PREDICTED_TRAIN_OUT + '{sample}.rf.predicted_labels_all.tsv'
        params:
                lsfoutfile = RF_TRAIN_OUT + '{sample}.rf_train_all.lsfout.log',
                lsferrfile = RF_TRAIN_OUT + '{sample}.rf_train_all.lsferr.log',
                scratch = config['methods']['rf']['train']['scratch'],
                mem = config['methods']['rf']['train']['mem'],
                time = config['methods']['rf']['train']['time'],
                params = config['methods']['rf']['train']['params'],
                output_dir = RF_TRAIN_OUT,
                sample_name = "{sample}"
        threads:
                config['methods']['rf']['train']['threads']
        shell:
                config['methods']['rf']['train']['call'] + ' --SCE {input.sce_in} --CV_index {input.barcodes} --outputDirec {params.output_dir} --sampleName {params.sample_name}'

rule svm_train:
        input:
                sce_in =  SVM_TRAIN_IN + '{sample}.genes_cells_filtered.corrected.atypical_removed.RDS',
                barcodes = CV_FOLD_OUT + '{sample}.index{k_index}.RDS'
        output:
                #SVM_TRAIN_OUT + '{sample}.model.RDS',
                pred_labels = PREDICTED_TRAIN_OUT + '{sample}.svm.predicted_labels_index{k_index}.tsv'
        params:
                lsfoutfile = SVM_TRAIN_OUT + '{sample}.svm_train.lsfout.log',
                lsferrfile = SVM_TRAIN_OUT + '{sample}.svm_train.lsferr.log',
                scratch = config['methods']['svm']['train']['scratch'],
                mem = config['methods']['svm']['train']['mem'],
                time = config['methods']['svm']['train']['time'],
                params = config['methods']['svm']['train']['params'],
                output_dir = SVM_TRAIN_OUT,
                sample_name = "{sample}"
        threads:
                config['methods']['svm']['train']['threads']
        shell:
                config['methods']['svm']['train']['call'] + ' --SCE {input.sce_in} --CV_index {input.barcodes} --outputDirec {params.output_dir} --sampleName {params.sample_name}'

rule svm_train_all:
        input:
                sce_in = SVM_TRAIN_IN + '{sample}.genes_cells_filtered.corrected.atypical_removed.RDS',
                barcodes = CV_FOLD_OUT + '{sample}.indexAll.RDS'
        output:
                #SVM_TRAIN_OUT + '{sample}.model_all.RDS',
                pred_labels = PREDICTED_TRAIN_OUT + '{sample}.svm.predicted_labels_all.tsv'
        params:
                lsfoutfile = SVM_TRAIN_OUT + '{sample}.svm_train_all.lsfout.log',
                lsferrfile = SVM_TRAIN_OUT + '{sample}.svm_train_all.lsferr.log',
                scratch = config['methods']['svm']['train']['scratch'],
                mem = config['methods']['svm']['train']['mem'],
                time = config['methods']['svm']['train']['time'],
                params = config['methods']['svm']['train']['params'],
                output_dir = SVM_TRAIN_OUT,
                sample_name = "{sample}"
        threads:
                config['methods']['svm']['train']['threads']
        shell:
                config['methods']['svm']['train']['call'] + ' --SCE {input.sce_in} --CV_index {input.barcodes} --outputDirec {params.output_dir} --sampleName {params.sample_name}'

rule garnett_train:
        input:
                sce_in =  GARNETT_TRAIN_IN + '{sample}.genes_cells_filtered.corrected.atypical_removed.RDS',
                barcodes = CV_FOLD_OUT + '{sample}.index{k_index}.RDS'
        output:
                #model_dir = GARNETT_TRAIN_OUT + '{sample}.model.RDS',
                pred_labels = PREDICTED_TRAIN_OUT + '{sample}.garnett.predicted_labels_index{k_index}.tsv' # all tool output tsvs need to be present at same time for cv_summary
        params:
                lsfoutfile = GARNETT_TRAIN_OUT + '{sample}.garnett_train.lsfout.log',
                lsferrfile = GARNETT_TRAIN_OUT + '{sample}.garnett_train.lsferr.log',
                scratch = config['methods']['garnett']['train']['scratch'],
                mem = config['methods']['garnett']['train']['mem'],
                time = config['methods']['garnett']['train']['time'],
                params = config['methods']['garnett']['train']['params'],
                output_dir = GARNETT_TRAIN_OUT,
                sample_name = "{sample}"
        threads:
                config['methods']['garnett']['train']['threads']
        shell:
                config['methods']['garnett']['train']['call'] + ' --sce {input.sce_in} --barcodes_index {input.barcodes} --output_dir {params.output_dir} --pred_labels_out {output.pred_labels} --sample_name {params.sample_name}'

rule garnett_train_all:
        input:
                sce_in = GARNETT_TRAIN_IN + '{sample}.genes_cells_filtered.corrected.atypical_removed.RDS'
        output:
                #model_dir = GARNETT_TRAIN_OUT + '{sample}.model_all.RDS',
                pred_labels = PREDICTED_TRAIN_OUT + '{sample}.garnett.predicted_labels_all.tsv'
        params:
                lsfoutfile = GARNETT_TRAIN_OUT + '{sample}.garnett_train_all.lsfout.log',
                lsferrfile = GARNETT_TRAIN_OUT + '{sample}.garnett_train_all.lsferr.log',
                scratch = config['methods']['garnett']['train']['scratch'],
                mem = config['methods']['garnett']['train']['mem'],
                time = config['methods']['garnett']['train']['time'],
                params = config['methods']['garnett']['train']['params'],
                output_dir = GARNETT_TRAIN_OUT,
                sample_name = "{sample}"
        threads:
                config['methods']['garnett']['train']['threads']
        shell:
                config['methods']['garnett']['train']['call'] + ' --sce {input.sce_in} --output_dir {params.output_dir} --pred_labels_out     {output.pred_labels} --sample_name {params.sample_name}'


# have fxn that looks into PREDICTED_TRAIN_OUT & create a list of files w/ .tsv ending to read into cv_summary script; don't need methods wildcard
#predicted_labels = for ... in PREDICTED_TRAIN_OUT

#def get_tsv_files(tools):
#        return expand(PREDICTED_TRAIN_OUT + wildcards.sample + '.{method}.predicted_labels_index{k_index}.tsv', method = tools)

#tsv_files = get_tsv_files(selected_tools)
#print(tsv_files)

TSV_FILES = [file.split(".") for file in glob.glob(PREDICTED_TRAIN_OUT + ".tsv")]

rule cv_summary_train:
        input:
                #cv_files = PREDICTED_TRAIN_OUT + '{sample}.{method}.predicted_labels_index{k_index}.tsv', #use hyperfxn
                cv_files = TSV_FILES,
                sce_in = CV_FOLD_OUT + "{sample}.indexAll.RDS"
        output:
                PREDICTED_TRAIN_OUT + '{sample}.cv_summary.tsv'
        params:
                lsfoutfile = PREDICTED_TRAIN_OUT + '{sample}.cv_summary.lsfout.log',
                lsferrfile = PREDICTED_TRAIN_OUT + '{sample}.cv_summary.lsferr.log',
                scratch = config['statistics']['cv_summary']['scratch'],
                mem = config['statistics']['cv_summary']['mem'],
                time = config['statistics']['cv_summary']['time'],
                params = config['statistics']['cv_summary']['params'],
                output_dir = CV_SUMMARY_OUT,
                sample_name = "{wildcards.sample}"
        threads:
                config['statistics']['cv_summary']['threads']
        shell:
                config['statistics']['cv_summary']['call'] + ' --CVfiles {input.cv_files} --SCE {input.sce_in} --outputDirec {params.output_dir} --sampleName {params.sample_name}'
