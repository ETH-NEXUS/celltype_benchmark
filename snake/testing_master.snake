import os, glob, sys, datetime
from os import path

# This function adapts the config object to include full path information
include: "misc_snake.py"

# input files and folders
SAMPLEMAPPING = config['input_output']['sample_map']
INPUTDIR = config['input_output']['input_dir']
OUTDIR = config['input_output']['output_dir']
TMPDIR = config['input_output']['tmp_dir']

# Check if the uses specified the proper input and output directories
if not 'INPUTDIR' in globals():
    print('You have to specify the root directory of the input SCE files!')
    sys.exit(1)
if not 'OUTDIR' in globals():
    print('You have to specify the root directory where the results will be generated!')
    sys.exit(1)
if not 'TMPDIR' in globals():
    print('You have to specify the root directory where temporary files will be stored!')
    sys.exit(1)

# Include the rules
include: "testing_rules.py"

SELECTED_METHODS = config['resources']['celltype_methods']
TRAINED_MODELS = config['resources']['trained_models']

print(SELECTED_METHODS)
print(TRAINED_MODELS)
print(get_sample_names())

####################################################

CELLTYPING_IN = OUTDIR + "trained_model/"
CELLTYPING_OUT = OUTDIR + "celltyping/"

# Include the rules
include: "testing_rules.py"
localrules: all
rule all:
	input:
		expand(CELLTYPING_OUT + '{sample}/{method}/predicted_labels.{model}.csv', sample = get_sample_names(), method = SELECTED_METHODS, model = TRAINED_MODELS),
                expand(CELLTYPING_OUT + '{sample}/scROSI/predicted_labels.csv', sample = get_sample_names()),
                expand(CELLTYPING_OUT + "{sample}/{method}/{sample}.{model}.f1-score_{method}.csv", sample = get_sample_names(), method = SELECTED_METHODS, model = TRAINED_MODELS)
                #expand(CELLTYPING_OUT + "{sample}/{method}/{sample}.f1-score_{method}.csv", sample = get_sample_names(), method = SELECTED_METHODS)
	output:
		OUTDIR + "complete_testing.txt"
	params:
		lsfoutfile = OUTDIR + 'complete_testing.lsfout.log',
		lsferrfile = OUTDIR + 'complete_testing.lsferr.log'
	benchmark:
		OUTDIR + 'complete_testing.txt.benchmark'
	shell:
		'date > {output}'

